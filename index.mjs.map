{"mappings":";;;;;;;;;CCAA,UAAY;AAQZ,EAAkC,AAAlC,gCAAkC;AAClC,EAAgC,AAAhC,8BAAgC;AAChC,EAA8C,AAA9C,4CAA8C;AAC9C,EAAsD,AAAtD,oDAAsD;AACtD,EAAkD,AAAlD,gDAAkD;AAClD,EAA4D,AAA5D,0DAA4D;AAG5D,EAAe,AAAf,aAAe;AAEf,EAKG,AALH;;;;;CAKG,AALH,EAKG,UACM,qCAAe,CAAE,GAAG,EAAG,CAAC;IAChC,GAAG,CAAE,OAAO;WACH,OAAO,CAAC,IAAI,CAAE,GAAG,IAAK,IAAI,GAAG,KAAK;AAC5C,CAAC,AAAC,CAAiC,AAAjC,EAAiC,AAAjC,+BAAiC;AAGnC,EAKG,AALH;;;;;CAKG,AALH,EAKG,UACM,qCAAe,CAAE,IAAI,EAAG,CAAC;IACjC,GAAG,CAAC,OAAO;WACH,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG,KAAK;AAC1C,CAAC,AAAC,CAAiC,AAAjC,EAAiC,AAAjC,+BAAiC;AAGnC,EAAiB,AAAjB,eAAiB;AAEjB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,UACM,gCAAU,CAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAG,CAAC;IAC3C,EAA0C,AAA1C,wCAA0C;IAC1C,EAAE,oBAAqB,gCAAU,UACzB,GAAG,CAAC,gCAAU,CAAE,IAAI,EAAE,IAAI,EAAE,OAAO;IAE3C,EAA4B,AAA5B,0BAA4B;SACvB,IAAI,GAAG,IAAI,KAAI,yBAA2B;SAC1C,OAAO,GAAG,OAAO,KAAI,GAAK;SAC1B,IAAI,GAAG,QAAQ,CAAE,IAAI,IAAI,EAAE;AACjC,CAAC,AAAC,CAA4B,AAA5B,EAA4B,AAA5B,0BAA4B;AAG9B,EAKG,AALH;;;;;CAKG,AALH,EAKG,CACH,gCAAU,CAAC,SAAS,CAAC,YAAY,YAAa,IAAI,EAAG,CAAC;IACrD,GAAG,CAAC,OAAO;;IACX,OAAO,CAAC,QAAQ,QAAQ,IAAI;IAC5B,OAAO,CAAC,IAAI,QAAQ,IAAI;IACxB,OAAO,CAAC,IAAI,GAAG,IAAI;WACZ,OAAO;AACf,CAAC,CAAE,CAA4B,AAA5B,EAA4B,AAA5B,0BAA4B;AAE/B,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,CACH,gCAAU,CAAC,SAAS,CAAC,MAAM,cAAc,CAAC;IACzC,GAAG,CAAC,IAAI,GAAG,SAAS;IACpB,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM;IACvB,GAAG,CAAC,GAAG;IACP,GAAG,CAAC,MAAM;IACV,GAAG,CAAC,QAAQ;IACZ,GAAG,CAAC,KAAK;IACT,GAAG,CAAC,MAAM;IAEV,EAAE,EAAG,KAAK,GAAG,CAAC,EACb,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,oFAAsF;IAGxG,GAAG,GAAG,IAAI,CAAE,CAAC;IACb,EAAE,GAAI,gCAAQ,CAAE,GAAG,GAClB,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,2EAA6E,IAAG,GAAG,IAAG,EAAI;IAEhH,EAAE,EAAG,KAAK,GAAG,CAAC,EAAG,CAAC;QACjB,KAAK,GAAG,EAAE;QACV,MAAM,GAAG,CAAC;QACV,QAAQ,GAAG,IAAI,CAAE,CAAC;IACnB,CAAC,MAAM,CAAC;QACP,MAAM,GAAG,IAAI,CAAE,CAAC;QAChB,EAAE,GAAI,uBAAQ,CAAE,MAAM,GACrB,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,mEAAqE,IAAG,MAAM,IAAG,EAAI;QAE3G,QAAQ,GAAG,IAAI,CAAE,CAAC;QAClB,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,EAAE;QAC1B,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC;IAC5B,CAAC;IAED,EAAE,GAAI,yBAAU,CAAE,QAAQ,GACzB,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,2EAA6E,IAAG,QAAQ,IAAG,EAAI;IAGrH,GAAG,CAAC,IAAI,IAAG,MAAQ,SAAQ,OAAO,GAAG,MAAM,CAAE,kBAAkB,CAAE,GAAG;IACpE,IAAI,KAAI,OAAS,IAAG,KAAK,IAAG,QAAU,IAAG,MAAM;IAE/C,EAAE,EAAG,MAAM,CAAC,MAAM,MAAK,IAAM,GAC5B,IAAI,KAAI,YAAc;SAGlB,eAAe,MAAO,YAAY,CAAE,IAAI,GAAI,QAAQ;AAC1D,CAAC,CAAE,CAAsB,AAAtB,EAAsB,AAAtB,oBAAsB;AAGzB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,CACH,gCAAU,CAAC,SAAS,CAAC,MAAM,cAAc,CAAC;IACzC,GAAG,CAAC,IAAI,GAAG,SAAS;IACpB,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM;IACvB,GAAG,CAAC,IAAI;IACR,GAAG,CAAC,IAAI;IACR,GAAG,CAAC,QAAQ;IACZ,GAAG,CAAC,QAAQ;IAEZ,EAAE,EAAG,KAAK,GAAG,CAAC,EACb,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,iFAAmF;IAGrG,IAAI,GAAG,IAAI,CAAE,CAAC;IACd,EAAE,GAAI,gCAAQ,CAAE,IAAI,GACnB,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,2EAA6E,IAAG,IAAI,IAAG,EAAI;IAEjH,EAAE,EAAG,KAAK,GAAG,CAAC,EAAG,CAAC;QACjB,QAAQ,IAAG,EAAI;QACf,QAAQ,GAAG,IAAI,CAAE,CAAC;IACnB,CAAC,MAAM,CAAC;QACP,QAAQ,GAAG,IAAI,CAAE,CAAC;QAClB,EAAE,GAAI,gCAAQ,CAAE,QAAQ,GACvB,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,8EAAgF,IAAG,QAAQ,IAAG,EAAI;QAExH,QAAQ,GAAG,IAAI,CAAE,CAAC;IACnB,CAAC;IACD,EAAE,GAAI,yBAAU,CAAE,QAAQ,GACzB,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,2EAA6E,IAAG,QAAQ,IAAG,EAAI;IAGrH,IAAI,GAAG,IAAI,CAAC,OAAO,UAAS,CAAG;IAC/B,IAAI,IAAG,MAAQ,SAAQ,OAAO,IAAG,cAAgB,IAAG,QAAQ,IAAG,MAAQ,IAAG,MAAM,CAAE,kBAAkB,CAAE,IAAI;SACrG,eAAe,MAAO,YAAY,CAAE,IAAI,GAAI,QAAQ;AAC1D,CAAC,CAAE,CAAsB,AAAtB,EAAsB,AAAtB,oBAAsB;AAEzB,EAKG,AALH;;;;;CAKG,AALH,EAKG,CACH,gCAAU,CAAC,SAAS,CAAC,MAAM,YAAa,MAAM,EAAE,QAAQ,EAAG,CAAC;IAC3D,EAAE,GAAI,uBAAQ,CAAE,MAAM,GACrB,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,4EAA8E,IAAG,MAAM,IAAG,EAAI;IAEpH,EAAE,GAAI,yBAAU,CAAE,QAAQ,GACzB,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,6EAA+E,IAAG,QAAQ,IAAG,EAAI;IAEvH,GAAG,CAAC,IAAI,IAAG,MAAQ,SAAQ,OAAO,IAAG,QAAU;IAC/C,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,MAAM;IACpC,OAAO,CAAC,IAAI,EAAC,qCAAuC,GAAE,GAAG;IACzD,EAA6C,AAA7C,2CAA6C;IAC7C,EAAqC,AAArC,mCAAqC;IACrC,IAAI,IAAI,GAAG;SACN,eAAe,MAAO,YAAY,CAAE,IAAI,GAAI,QAAQ;AAC1D,CAAC,CAAE,CAAsB,AAAtB,EAAsB,AAAtB,oBAAsB;AAEzB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,CACH,gCAAU,CAAC,SAAS,CAAC,WAAW,cAAc,CAAC;IAC9C,GAAG,CAAC,IAAI,GAAG,SAAS;IACpB,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM;IACvB,GAAG,CAAC,KAAK;IACT,GAAG,CAAC,MAAM;IACV,GAAG,CAAC,QAAQ;IACZ,GAAG,CAAC,GAAG;IACP,GAAG,CAAC,KAAK;IACT,GAAG,CAAC,IAAI;IAER,EAAE,EAAG,KAAK,GAAG,CAAC,EACb,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,mFAAqF;IAEvG,KAAK,GAAG,IAAI,CAAE,CAAC;IACf,EAAE,EAAG,KAAK,GAAG,CAAC,EAAG,CAAC;QACjB,MAAM;;QACN,QAAQ,GAAG,IAAI,CAAG,CAAC;IACpB,CAAC,MAAM,CAAC;QACP,MAAM,GAAG,IAAI,CAAE,CAAC;QAChB,EAAE,GAAI,uBAAQ,CAAE,MAAM,GACrB,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,mEAAqE,IAAG,MAAM,IAAG,EAAI;QAE3G,QAAQ,GAAG,IAAI,CAAG,CAAC;IACpB,CAAC;IAED,EAAE,GAAI,yBAAU,CAAE,QAAQ,GACzB,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,mEAAqE,IAAG,QAAQ,IAAG,EAAI;IAE7G,EAAG,GAAE,qCAAe,CAAE,KAAK,MAAO,qCAAe,CAAE,KAAK,GAAK,CAAC;QAC7D,GAAG,GAAG,GAAG,CAAC,KAAK,EAAE,2GACc;QAC/B,KAAK,CAAC,GAAG;IACV,CAAC;IAED,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,EAAE;IAC1B,IAAI,IAAG,MAAQ,SAAQ,OAAO,IAAG,MAAQ,IAAG,MAAM,CAAE,KAAK;IAEzD,EAAE,EAAG,MAAM,CAAC,MAAM;QACjB,EAAE,EAAG,qCAAe,CAAE,MAAM,CAAC,MAAM,GAClC,IAAI,KAAI,QAAU,IAAG,MAAM,CAAC,MAAM,IAAG,OAAS,IAAG,KAAK;aAChD,CAAC;YACP,GAAG,GAAG,GAAG,CAAC,KAAK,EAAE,uDAAyD;YAC1E,KAAK,CAAC,GAAG;QACV,CAAC;;SAEG,eAAe,MAAO,YAAY,CAAE,IAAI,GAAI,QAAQ;AAC1D,CAAC,CAAE,CAA2B,AAA3B,EAA2B,AAA3B,yBAA2B;AAG9B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,CACH,gCAAU,CAAC,SAAS,CAAC,eAAe,YAAa,OAAO,EAAE,QAAQ,EAAG,CAAC;IACrE,OAAO,CAAC,GAAG,EAAC,+BAAiC;AAC7C,EAAe,AAAf,aAAe;AACf,EAA+C,AAA/C,6CAA+C;AAC/C,EAAmC,AAAnC,iCAAmC;AACnC,EAAiB,AAAjB,eAAiB;AACjB,EAAmD,AAAnD,iDAAmD;AACnD,EAAkB,AAAlB,gBAAkB;AAClB,EAAO,AAAP,KAAO;AACP,EAA0C,AAA1C,wCAA0C;AAC1C,EAA8C,AAA9C,4CAA8C;AAC9C,EAAO,AAAP,KAAO;AACP,EAAqD,AAArD,mDAAqD;AACrD,EAAuB,AAAvB,qBAAuB;AACvB,EAAO,AAAP,KAAO;AACP,EAAI,AAAJ,EAAI;AACJ,EAAmD,AAAnD,iDAAmD;AACnD,EAAsB,AAAtB,oBAAsB;AACtB,EAAM,AAAN,IAAM;AACN,EAAiB,AAAjB,eAAiB;AAClB,CAAC,CAAE,CAA+B,AAA/B,EAA+B,AAA/B,6BAA+B;IAGlC,EAAa,AAAb,WAAa;AAEb,wCAA0B,GAAX,gCAAU;;;WD/Rd,CAAC;IACV,OAAO,CAAC,GAAG,EAAC,cAAgB;IAC7B,OAAO,CAAC,GAAG,CAAC,wCAAU;AACvB,CAAC","sources":["src/index.mjs","lib/concept.mjs"],"sourcesContent":["import ConceptNet from '../lib/concept.mjs'\n\n(async ()=>{\n\t\tconsole.log('SSSSSSSSSSSSSs')\n\tconsole.log(ConceptNet)\n})()\n\n","'use strict';\n//var searchParams = new URLSearchParams(paramsString);\n// MODULES //\nimport axios from 'axios'\n// import querystring from 'querystring'\nimport isFunction from 'validate.io-function'\nimport isObject from 'validate.io-object'\nimport isString from 'validate.io-string-primitive'\n// const axios = require('axios');\n// var http = require( 'http' );\n// var querystring = require( 'querystring' );\n// var isFunction = require( 'validate.io-function' );\n// var isObject = require( 'validate.io-object' );\n// var isString = require( 'validate.io-string-primitive' );\n\n\n// FUNCTIONS //\n\n/**\n * Validates whether the supplied string is a valid ConceptNet URI.\n *\n * @param {string} uri - input string\n * @returns {boolean} true if input is valid URI, false otherwise\n */\nfunction isConceptNetURI( uri ) {\n\tvar  myRegEx = /\\/(?:[acdelrs]|and|or)\\/[a-zA-Z]{2}\\/\\w+/;\n\treturn ( myRegEx.test( uri ) ? true : false );\n} // end FUNCTION isConceptNetURI()\n\n\n/**\n * Validates whether the supplied string is a valid term path.\n *\n * @param {string} path - input string\n * @returns {boolean} true if input is valid term path, false otherwise\n */\nfunction isValidTermPath( path ) {\n\tvar myRegEx = /\\/list\\/[a-zA-Z]{2}\\/\\w+(?:@[-+]?[0-9]*\\.?[0-9]+)?(,\\w+(?:@[-+]?[0-9]*\\.?[0-9]+)?)*/;\n\treturn (myRegEx.test(path) ? true : false);\n} // end FUNCTION isValidTermPath()\n\n\n// CONCEPT NET //\n\n/**\n * Creates an instance of the ConceptNet class.\n *\n * @constructor\n * @param {string} [host='conceptnet5.media.mit.edu'] - description\n * @param {number} [port=80] - description\n * @param {string} [version='5.4'] - description\n * @returns {ConceptNet} ConceptNet instance\n */\nfunction ConceptNet( host, port, version ) {\n\t// If not invoked as a constructor call...\n\tif ( !(this instanceof ConceptNet) ){\n\t\treturn new ConceptNet( host, port, version );\n\t}\n\t// Set default parameters...\n\tthis.host = host || 'conceptnet5.media.mit.edu';\n\tthis.version = version || '5.4';\n\tthis.port = parseInt( port || 80 );\n} // end FUNCTION ConceptNet()\n\n\n/**\n * Build an options object for a HTTP request.\n *\n * @param {string} path - HTTP request path\n * @returns {Object} options object\n */\nConceptNet.prototype.buildOptions = function( path ) {\n\tvar options = {};\n\toptions.hostname = this.host;\n\toptions.port = this.port;\n\toptions.path = path;\n\treturn options;\n}; // end METHOD buildOptions()\n\n/**\n * Find a ConceptNet object by its URI.\n *\n * @param {string} uri - ConceptNet URI\n * @param {Object} [params] - GET request parameters\n * @param {number} [params.limit=50] - number of returned results\n * @param {number} [params.offset=0] - number of results to be skipped\n * @param {Function} callback - callback function\n */\nConceptNet.prototype.lookup = function() {\n\tvar args = arguments;\n\tvar nargs = args.length;\n\tvar uri;\n\tvar params;\n\tvar callback;\n\tvar limit;\n\tvar offset;\n\n\tif ( nargs < 2 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide a ConceptNet URI and a callback function.' );\n\t}\n\n\turi = args[ 0 ];\n\tif ( !isString( uri ) ) {\n\t\tthrow new TypeError( 'invalid input argument. First argument must be a string primitive. Value: `' + uri + '`.' );\n\t}\n\tif ( nargs < 3 ) {\n\t\tlimit = 50;\n\t\toffset = 0;\n\t\tcallback = args[ 1 ];\n\t} else {\n\t\tparams = args[ 1 ];\n\t\tif ( !isObject( params ) ) {\n\t\t\tthrow new TypeError( 'invalid input argument. Params argument must be an object. Value: `' + params + '`.' );\n\t\t}\n\t\tcallback = args[ 2 ];\n\t\tlimit = params.limit || 50;\n\t\toffset = params.offset || 0;\n\t}\n\n\tif ( !isFunction( callback ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Last argument must be a callback function. Value: `' + callback + '`.' );\n\t}\n\n\tvar path = '/data/' + this.version + String( encodeURIComponent( uri ) );\n\tpath += '?limit=' + limit + '&offset=' + offset;\n\n\tif ( params.filter === 'core' ) {\n\t\tpath += '&filter=core';\n\t}\n\n\tthis.makeHtppRequest( this.buildOptions( path ), callback );\n}; // end METHOD lookup()\n\n\n/**\n * Finds the ConceptNet URI for a given text, applying steps such as reducing English words to their root form.\n *\n * @param {string} text - input text\n * @param {string} [language] - language code\n * @param {Function} callback - callback function\n * @returns {string} corresponding ConceptNet URI\n */\nConceptNet.prototype.getURI = function() {\n\tvar args = arguments;\n\tvar nargs = args.length;\n\tvar path;\n\tvar text;\n\tvar language;\n\tvar callback;\n\n\tif ( nargs < 2 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide an input text and a callback function.' );\n\t}\n\n\ttext = args[ 0 ];\n\tif ( !isString( text ) ) {\n\t\tthrow new TypeError( 'invalid input argument. First argument must be a string primitive. Value: `' + text + '`.' );\n\t}\n\tif ( nargs < 3 ) {\n\t\tlanguage = 'en';\n\t\tcallback = args[ 1 ];\n\t} else {\n\t\tlanguage = args[ 1 ];\n\t\tif ( !isString( language ) ) {\n\t\t\tthrow new TypeError( 'invalid input argument. Language argument must be a string primitive. Value: `' + language + '`.' );\n\t\t}\n\t\tcallback = args[ 2 ];\n\t}\n\tif ( !isFunction( callback ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Last argument must be a callback function. Value: `' + callback + '`.' );\n\t}\n\n\ttext = text.replace(/\\s+/g, '_');\n\tpath = '/data/' + this.version + '/uri?language=' + language + '&text=' + String( encodeURIComponent( text ) );\n\tthis.makeHtppRequest( this.buildOptions( path ), callback );\n}; // end METHOD getURI()\n\n/**\n * Search ConceptNet edges using multiple requirements.\n *\n * @param {Object} params - GET request parameters\n * @param {Function} callback - callback function\n */\nConceptNet.prototype.search = function( params, callback ) {\n\tif ( !isObject( params ) ) {\n\t\tthrow new TypeError( 'invalid input argument. First argument must be an parameter object. Value: `' + params + '`.' );\n\t}\n\tif ( !isFunction( callback ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Second argument must be a callback function. Value: `' + callback + '`.' );\n\t}\n\tvar path = '/data/' + this.version + '/search?';\n\tvar str = new URLSearchParams(params);\n\tconsole.warn('change querystring to URLSearchParams', str)\n\t// var str = querystring.stringify( params );\n\t// str = querystring.unescape( str );\n\tpath += str;\n\tthis.makeHtppRequest( this.buildOptions( path ), callback );\n}; // end METHOD search()\n\n/**\n * Finds concepts similar to a particular concept or list of concepts.\n *\n * @param {string} input - ConceptNet URI or `/list/<language>/<term list>` path\n * @param {Object} [params] - specifies the parameters of the GET request\n * @param {number} [params.limit=10] - number of returned results\n * @param {string} [params.filter=''] - filter out results that don't start with the given URI.\n * @param {Function} callback - callback function\n */\nConceptNet.prototype.association = function() {\n\tvar args = arguments;\n\tvar nargs = args.length;\n\tvar input;\n\tvar params;\n\tvar callback;\n\tvar err;\n\tvar limit;\n\tvar path;\n\n\tif ( nargs < 2 ) {\n\t\tthrow new Error( 'insufficient input arguments. Must provide an input string and a callback function.' );\n\t}\n\tinput = args[ 0 ];\n\tif ( nargs < 3 ) {\n\t\tparams = {};\n\t\tcallback = args [ 1 ];\n\t} else {\n\t\tparams = args[ 1 ];\n\t\tif ( !isObject( params ) ) {\n\t\t\tthrow new TypeError( 'invalid input argument. Second argument must be an object. Value: `' + params + '`.' );\n\t\t}\n\t\tcallback = args [ 2 ];\n\t}\n\n\tif ( !isFunction( callback ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Third argument must be a function. Value: `' + callback + '`.' );\n\t}\n\tif( !isConceptNetURI( input ) && !isValidTermPath( input ) ) {\n\t\terr = new Error( 'The input argument must be either a valid ConceptNet URI or a path of the form ' +\n\t\t\t'/list/<language>/<term list>' );\n\t\tthrow err;\n\t}\n\n\tlimit = params.limit || 10;\n\tpath = '/data/' + this.version + '/assoc' + String( input );\n\n\tif ( params.filter ) {\n\t\tif ( isConceptNetURI( params.filter ) ) {\n\t\t\tpath += '?filter=' + params.filter + '&limit=' + limit;\n\t\t} else {\n\t\t\terr = new Error( 'The GET argument filter must be a valid ConceptNet URI.' );\n\t\t\tthrow err;\n\t\t}\n\t}\n\tthis.makeHtppRequest( this.buildOptions( path ), callback );\n}; // end METHOD association()\n\n\n/**\n * Performs a HTTP request and invokes the supplied callback function upon completion.\n *\n * @private\n * @param {Object} options - HTTP request options\n * @param {Function} callback - callback function\n */\nConceptNet.prototype.makeHtppRequest = function( options, callback ) {\n\tconsole.log('------> makeHtppRequest <------')\n\t// var request;\n\t// request = http.request( options, retrieve );\n\t// function retrieve ( response ) {\n\t// \tvar str = '';\n\t// \tresponse.on( 'data', function onData( chunk ) {\n\t// \t\tstr += chunk;\n\t// \t});\n\t// \tresponse.on( 'end', function onEnd() {\n\t// \t\tcallback( undefined, JSON.parse( str ) );\n\t// \t});\n\t// \tresponse.on( 'error', function onError( error ) {\n\t// \t\tcallback( error );\n\t// \t});\n\t// }\n\t// request.on( 'error', function onError( error ) {\n\t// \tcallback( error );\n\t// });\n\t// request.end();\n}; // end METHOD makeHtppRequest()\n\n\n// EXPORTS //\n\nexport default ConceptNet;\n"],"names":[],"version":3,"file":"index.mjs.map"}